# -*- coding: utf-8 -*-
"""bdt-sentiment

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dceUuznVfGReePJGx9sc2ORcpGXrmON6
"""

#!pip install transformers

from transformers import pipeline
import pandas as pd
import re
from sklearn.metrics import accuracy_score
from io import StringIO
from google.cloud import storage

# Initialize the sentiment analysis pipeline
nlp = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment")

def preprocess_text(text):
    """Preprocess and clean the tweet text."""
    text = text.strip()  # Remove leading and trailing whitespaces
    text = re.sub(r'\s+', ' ', text)  # Replace multiple consecutive whitespaces
    text = re.sub(r'[^\w\s]', '', text)  # Remove punctuation
    text = re.sub(r'[^A-Za-z0-9\s]', '', text)  # Remove special characters
    # Remove emojis
    emoji_pattern = re.compile("["
                           u"\U0001F600-\U0001F64F"  # emoticons
                           u"\U0001F300-\U0001F5FF"  # symbols & pictographs
                           u"\U0001F700-\U0001F77F"  # alchemical symbols
                           u"\U0001F780-\U0001F7FF"  # Geometric Shapes
                           "]+", flags=re.UNICODE)
    text = emoji_pattern.sub(r'', text)
    return text

def map_sentiment_label(label):
    """Convert model labels to human-readable labels."""
    mapping = {
        'LABEL_0': 'negative',
        'LABEL_1': 'neutral',
        'LABEL_2': 'positive'
    }
    return mapping.get(label, 'unknown')

# Fetch the dataset from Google Cloud Storage
client = storage.Client.create_anonymous_client()
bucket_name = 'bdt-sentiment'
object_name = 'tweets-sentiment-synth.csv'
bucket = client.bucket(bucket_name=bucket_name)
blob = bucket.blob(object_name)
source_csv = blob.download_as_text()
df = pd.read_csv(StringIO(source_csv), delimiter=',')

# Preprocess all the tweets in the DataFrame
df['cleaned_tweet'] = df['tweet'].apply(preprocess_text)

# Derive the sentiment label based on the model's output
df['predicted_sentiment'] = df['cleaned_tweet'].apply(lambda tweet: map_sentiment_label(nlp(tweet)[0]['label']))

# Calculate accuracy by comparing the predicted sentiment with the actual sentiment
accuracy = accuracy_score(df['sentiment'], df['predicted_sentiment'])

# Print the overall accuracy
print(f"Overall Accuracy: {accuracy * 100:.2f}%")